name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:

      - name: Github Repository에 올린 파일들을 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.properties 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      #      - name: 빌드된 파일 이름 변경하기
      #        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar
      #
      #      - name: 압축하기
      #        run: tar -czvf $GITHUB_SHA.tar.gz project.jar appspec.yml scripts

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t usopen-backend .

      - name: Docker 이미지 Tag 붙이기
        run: docker tag usopen-backend ${{ steps.login-ecr.outputs.registry }}/usopen-server-second:latest

      #      - name: S3에 프로젝트 폴더 업로드 하기
      #        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://usopen-server/$GITHUB_SHA.tar.gz

      - name: ECR에 Docker 이미지 Push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/usopen-server-second:latest

      #      -
      #
      #      - name: CodeDeploy를 활용해 EC2에 프로젝트 코드를 배포하라고 명령
      #        run: aws deploy create-deployment
      #          --application-name usopen-server
      #          --deployment-config-name CodeDeployDefault.AllAtOnce
      #          --deployment-group-name Production
      #          --s3-location bucket=instagram-server,bundleType=tgz,key=$GITHUB_SHA.tar.gz
      #
      #
      #
      #      - name: SCP로 EC2에 빌드된 파일 전송하기
      #        uses: appleboy/scp-action@v0.1.7
      #        with:
      #          host: ${{ secrets.EC2_HOST }}
      #          username: ${{ secrets.EC2_USERNAME }}
      #          key: ${{ secrets.EC2_PRIVATE_KEY }}
      #          source: project.jar
      #          target: /home/ubuntu/usopen-backend/tobe

      - name: SSH(원격 접속)로 EC2에 접속하기
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker stop usopen-backend || true
            docker rm usopen-backend || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/usopen-server-second:latest
            docker run -d --name usopen-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/usopen-server-second:latest
            
            rm -rf /home/ubuntu/usopen-backend/current
            mkdir /home/ubuntu/usopen-backend/current
            mv /home/ubuntu/usopen-backend/tobe/project.jar /home/ubuntu/usopen-backend/current/project.jar
            cd /home/ubuntu/usopen-backend/current
            sudo fuser -k -n tcp 8080 || true
            nohup java -jar project.jar > ./output.log 2>&1 &
            rm -rf /home/ubuntu/usopen-backend/tobe
